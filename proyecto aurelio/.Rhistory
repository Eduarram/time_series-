which(hatvalues > 2*(3+1)/length(mtcars$mpg))
k <- hatvalues(p)
which(k > 2*(3+1)/length(mtcars$mpg))
outlier.test(p)
outlierTest(p)
cooks.distance(p)
k<-cooks.distance(p)
which(k>length(mtcars))
which(k>length(4/(length(mtcars$mpg-3-1))))
which(k>4/(length(mtcars$mpg-3-1)))
knitr::opts_chunk$set(echo = TRUE)
y_i <- c(0.4826, 0.5588, 0.6350, 0.7874, 0.8382, 0.9906, 1.1176, 1.1430)
x_i <- c(0.2540, 0.3556, 0.4572, 0.5588, 0.6604, 0.7620, 0.8636, 0.9652)
lm(y_i~x_i)
library(tidyverse)
df <- data.frame(y_i, x_i)
lm(y_i~x_i, data = df)
#library(tidyverse)
ggplot(data=df, mapping = aes(x=x_i, y=y_i)) +
geom_point(color="blue") + geom_smooth(color="red")
#library(tidyverse)
ggplot(data=df, mapping = aes(x=x_i, y=y_i)) +
geom_point(color="blue") + geom_smooth(color="red", method = "lm")
lm(y_i~x_i, data = df)$residuals
SSE <- lm(y_i~x_i, data = df)$residuals
sum(SSE^2)/length(df$y_i)
SSE <- lm(y_i~x_i, data = df)$residuals
sum(SSE^2)/(length(df$y_i)-2)
SSE
SSE^2
sum(SSE^2)
summary(lm(y_i~x_i, data = df))$r.squared
summary(lm(y_i~x_i, data = df))$r.adj.squared
summary(lm(y_i~x_i, data = df))$adj.r.squared
library(car)
library(nortest)
library(car)
library(nortest)
library(lmtest)
lm(y_i~x_i, data = df)$intercept
lm(y_i~x_i, data = df)
lm(y_i~x_i, data = df)$Intercept
lm(y_i~x_i, data = df)$Coeficents
lm(y_i~x_i, data = df)$B0
lm(y_i~x_i, data = df)$b0
lm(y_i~x_i, data = df)$bo
lm(y_i~x_i, data = df)[2]
lm(y_i~x_i, data = df)[1]
lm(y_i~x_i, data = df)[1[1]]
lm(y_i~x_i, data = df)$coefficients[1]
y_e <- (lm(y_i~x_i, data = df)$coefficients[1]) + (lm(y_i~x_i, data = df)$coefficients[2]*x_i) + lm(y_i~x_i, data = df)$residuals
y_e <- (lm(y_i~x_i, data = df)$coefficients[1]) + (lm(y_i~x_i, data = df)$coefficients[2]*x_i) + lm(y_i~x_i, data = df)$residuals
y_e
intercpt <- (lm(y_i~x_i, data = df)$coefficients[1])
Slope1 <- (lm(y_i~x_i, data = df)$coefficients[2])
y_e <- intercpt  + Slope1*x_i + SSE
df2 <- data.frame(y_e, SSE)
ggplot(data=df2, mapping = aes(x= y_e, y=SSE)) + geom_point()+
geom_abline(slope = Slope1, intercept = intercept)
intercpt <- (lm(y_i~x_i, data = df)$coefficients[1])
Slope1 <- (lm(y_i~x_i, data = df)$coefficients[2])
y_e <- intercpt  + Slope1*x_i + SSE
df2 <- data.frame(y_e, SSE)
ggplot(data=df2, mapping = aes(x= y_e, y=SSE)) + geom_point()+
geom_abline(slope = Slope1, intercept = intercpt)
intercpt <- (lm(y_i~x_i, data = df)$coefficients[1])
Slope1 <- (lm(y_i~x_i, data = df)$coefficients[2])
y_e <- intercpt  + Slope1*x_i + SSE
df2 <- data.frame(y_e, SSE)
ggplot(data=df2, mapping = aes(x= y_e, y=SSE)) +
geom_point(color="green") +
geom_smooth(color="blue")
intercpt <- (lm(y_i~x_i, data = df)$coefficients[1])
Slope1 <- (lm(y_i~x_i, data = df)$coefficients[2])
y_e <- intercpt  + Slope1*x_i + SSE
df2 <- data.frame(y_e, SSE)
ggplot(data=df2, mapping = aes(x= y_e, y=SSE)) +
geom_point(color="green") +
geom_smooth(color="blue", method="lm")
lm1 <- lm(y_i~x_i, data = df)
bptest(lm1 ~ x_i + x_i^2)
lm1 <- lm(y_i~x_i, data = df)
bptest(lm1 ~ x_i + I(x_i^2))
lm1 <- lm(y_i~x_i, data = df)
bptest(lm1)
lillie.test(SSE)
dwtest(lm1, alternative = "less")
dwtest(lm1, alternative = "less")
dwt(lm1)
dwtest(lm1, alternative = "greater")
dwt(lm1)
pchisq(2.52316, lower.tail = FALSE)
pchisq(2.52316, lower.tail = FALSE, df=2)
knitr::opts_chunk$set(echo = TRUE)
y_i <- c(0.4826, 0.5588, 0.6350, 0.7874, 0.8382, 0.9906, 1.1176, 1.1430)
x_i <- c(0.2540, 0.3556, 0.4572, 0.5588, 0.6604, 0.7620, 0.8636, 0.9652)
df <-data.frame(y_i, x_i)
lm(y_i~x_i, data = df)
summary(lm(y_i~x_i, data = df))
library(car)
library(nortest)
confint(lm(y_i~x_i, data = df))
lm(y_i~x_i, data = df)$residuals
SSE <- lm(y_i~x_i, data = df)$residuals
sum(SSE^2)/(length(x_i)-2)
plot(x_i, y_i, pch=25, col="Orange")
smoothingSpline = smooth.spline(df$x_i, df$y_i, spar=0.8)
lines(smoothingSpline, col='red', lwd=3)
lm(y_i~x_i, data = df)$r.squared
lm(y_i~x_i, data = df)$r.adj.squared
summary(lm(y_i~x_i, data = df))$r.squared
summary(lm(y_i~x_i, data = df))$r.adj.squared
summary(lm(y_i~x_i, data = df))$r.squared
summary(lm(y_i~x_i, data = df))$adj.r.squared
library(car)
library(nortest)
library(lmtest)
bptest(lm(y_i~x_i + I(x^2), data = df))
bptest(lm(y_i~x_i + I(x_i^2), data = df))
#test de breuch pagan
bptest(lm(y_i~x_i + I(x_i^2))
#test de breuch pagan
bptest(lm(y_i~x_i))
lillie.test(SSE)
dwt(lm(y_i~x_i))
dwt(lm(y_i~x_i))
dwtest(lm(y_i~x_i))
dwt(lm(y_i~x_i))
dwtest(lm(y_i~x_i), alternative="greater")
gc()
knitr::opts_chunk$set(echo = TRUE)
y_i <- c(0.4826, 0.5588, 0.6350, 0.7874, 0.8382, 0.9906, 1.1176, 1.1430)
x_i <- c(0.2540, 0.3556, 0.4572, 0.5588, 0.6604, 0.7620, 0.8636, 0.9652)
y_i <- c(0.4826, 0.5588, 0.6350, 0.7874, 0.8382, 0.9906, 1.1176, 1.1430)
x_i <- c(0.2540, 0.3556, 0.4572, 0.5588, 0.6604, 0.7620, 0.8636, 0.9652)
df <-data.frame(y_i, x_i)
lm(y_i~x_i, data = df)
confint(lm(y_i~x_i, data = df))
library(car)
library(nortest)
library(lmtest)
SSE <- lm(y_i~x_i, data = df)$residuals
sum(SSE^2)/(length(x_i)-2)
reg <-lm(y_i~x_i, data = df)
summary(reg)$r.adjust
summary(reg)$r.squared
summary(reg)$r.adj.squared
summary(reg)$r.squared
summary(reg)$adj.r.squared
reg <-lm(y_i~x_i, data = df)
reg
b0 <- reg$coefficients[1]
b1 <- reg$coefficients[2]
y_est <- b0 + b1*x_i
plot(y_est, SSE, pch=25, col="Orange")
smoothingSpline = smooth.spline(y_est, SSE, spar=0.8)
lines(smoothingSpline, col='red', lwd=3)
plot(y_est, SSE, pch=25, col="Orange")
smoothingSpline = smooth.spline(y_est, SSE, spar=1)
lines(smoothingSpline, col='red', lwd=3)
reg <-lm(y_i~x_i, data = df)
reg
confint(lm(y_i~x-i, data=df))
confint(lm(y_i~x_i, data=df))
bptest(lm(y_i~x_i + I(x_i^2)))
bptest(lm(y_i~x_i + I(x_i^2)))
bptest(reg)
lillie.test(SSE)
dwtest(reg, alternative = "greater")
dwt(reg)
hat_values <- hatvalues(reg)
which(hat_values>(2*(1+1)/length(x_i)))
outlier.test(reg)
outlierTest(reg)
cooks.distance(reg)
rad_solar <- c(29.7, 68.4, 120.7, 217.2, 313.5, 419.1, 535.9, 641.5)
biomasa <- c(16.6, 49.1, 121.7, 219.6, 375.5, 570.8, 648.2, 755.6)
df2 <- data.frame(biomasa, rad_solar)
plot(rad_solar, biomasa, pch=27, col="green")
smoothingSpline = smooth.spline(rad_solar, biomasa, spar=1)
lines(smoothingSpline, col='blue', lwd=3)
plot(rad_solar, biomasa, pch=20, col="green")
smoothingSpline = smooth.spline(rad_solar, biomasa, spar=1)
lines(smoothingSpline, col='blue', lwd=3)
plot(rad_solar, biomasa, pch=20, col="green", lwd=1)
smoothingSpline = smooth.spline(rad_solar, biomasa, spar=1)
lines(smoothingSpline, col='blue', lwd=3)
r <- lm(biomasa~rad_solar, data = df2)
r <- lm(biomasa~rad_solar, data = df2)
r
confint(r)
SSe <- lm(biomasa~rad_solar, data = df2)$residuals
sum(SSe^2)/(length(biomasa)-2)
SSe
summary(r)$r.squared
summary(r)$adj.r.squared
r$fitted.values
y_est2 <- r$fitted.values
plot(y_est2, SSe, pch=20, col="green", lwd=1)
smoothingSpline = smooth.spline(y_est2, SSe, spar=1)
lines(smoothingSpline, col='blue', lwd=3)
bptest(lm(biomasa~rad_solar+I(rad_solar^2)))
bptest(lm(biomasa~rad_solar+I(rad_solar^2)))
bptest(r)
lillie.test(SSe)
hist(SSe)
dx <- density(SSe)
hist(SSe)
lines(dx, lwd=2, col="red")
dx <- density(SSe)
hist(SSe)
lines(dx, lwd=2, col="red")
plot(dx, lwd = 2, col = "red",
main = "Densidad")
bptest(lm(biomasa~rad_solar+I(rad_solar^2)))
dwtest(r, alternative = "greater")
dwt(r)
hatval <- hatvalues(r)
which(hatval>(2*(1+1)/length(biomasa)))
length(}biomasa)
length(biomasa)
hatval <- hatvalues(r)
which(hatval>(2*(1+1)/8))
outlierTest(r)
cooks.distance(r)
cooks.distance(r)
cookd(r)
cookd(r)
dc <- cooks.distance(r)
which(dc > 4/(length(biomasa)-1-1))
dc <- cooks.distance(r)
which(dc > (4/(length(biomasa)-1-1)))
Q_o <- c(28, 112, 398, 772, 2294, 2484, 2586, 3024, 4179, 710)
x_4 <- c(.6, 1.8, 2.0, .4, 2.3, 1.0, .9, 1.1, 1.4, .7)
Q_p <- c(32, 142, 502, 790, 3075, 3230, 3553, 4265, 6529, 935)
x_1 <- c(.03, .03, .13, 1, 1, 3, 5, 7, 7, 7)
x_2 <- c(3, 3, 6.5, 15, 15, 7, 6, 6.5, 6.5, 6.5)
x_3 <- c(.6, 1.8, 2, .4, 2.3, 1, .9, 1.1, 1.4, 1.7)
yp <-ln(Q_o/Q_p)
Q_o <- c(28, 112, 398, 772, 2294, 2484, 2586, 3024, 4179, 710)
x_4 <- c(.6, 1.8, 2.0, .4, 2.3, 1.0, .9, 1.1, 1.4, .7)
Q_p <- c(32, 142, 502, 790, 3075, 3230, 3553, 4265, 6529, 935)
x_1 <- c(.03, .03, .13, 1, 1, 3, 5, 7, 7, 7)
x_2 <- c(3, 3, 6.5, 15, 15, 7, 6, 6.5, 6.5, 6.5)
x_3 <- c(.6, 1.8, 2, .4, 2.3, 1, .9, 1.1, 1.4, 1.7)
yp <-log(Q_o/Q_p)
df3 <- data.frame(yp, x_1, x_2, x_3, x_4)
reg2 <- lm(yp~ x_1 + x_2 + x_3 +x_4)
reg2 <- lm(yp~ x_1 + x_2 + x_3 +x_4)
reg2
confint(reg2)
sse <- reg2$residuals
sum(sse^2)/(length(x_4)-2)
summary(reg2)$r.squared
summary(reg2)$adj.r.squared
y_est3 <- reg2$fitted.values
plot(y_est3, sse, pch=20, col="green", lwd=1)
smoothingSpline = smooth.spline(y_est3, sse, spar=1)
lines(smoothingSpline, col='blue', lwd=3)
y_est3 <- reg2$fitted.values
plot(y_est3, sse, pch=20, col="green", lwd=1)
smoothingSpline = smooth.spline(y_est3, sse, spar=2)
lines(smoothingSpline, col='blue', lwd=3)
lillie.test(sse)
dx <- density(sse)
hist(sse)
lines(dx, lwd=2, col="red")
plot(dx, lwd = 2, col = "red",
main = "Densidad")
dwtest(reg2, alternaive="greater")
dwtest(reg2, alternative="greater")
dwt(reg2)
valores_ajustados <- y_est3^2
lm(yp~x_1+x_2+x_3+x_4+valores_ajustados)
valores_ajustados <- y_est3^2
summary(lm(yp~x_1+x_2+x_3+x_4+valores_ajustados))[4]
residualPlots(reg2)
cr.plots(reg2)
crPlots(reg2)
valores_hat <- hatvalues(reg2)
valores_hat <- hatvalues(reg2)
valores_hat
valores_hat <- hatvalues(reg2)
valores_hat
which(valores.hat > 2*(4+1)/length(x_1))
valores_hat <- hatvalues(reg2)
valores_hat
which(valores_hat > 2*(4+1)/length(x_1))
2*(4+1)/length(x_1)
outlierTest(reg2)
distancia <- cooks.distance(reg2)
distancia
distancia <- cooks.distance(reg2)
which(distancia > 4/(length(x_1)-4-1)
distancia <- cooks.distance(reg2)
which(distancia > 4/(length(x_1)-4-1))
knitr::opts_chunk$set(echo = TRUE)
install.packages("urca")
# Instalar y cargar los paquetes necesarios
#install.packages("urca")
library(dplyr)
library(urca)
# Crear una serie de tiempo con algunos datos de ejemplo
time_series <- c(1, 5, 8, 9, 7, 8, 10, 12, 15, 20, 25, 30)
# Aplicar el filtro Hodrick-Prescott a la serie de tiempo
hp_filtered <- hpfilter(time_series, lambda = 1600)
?hpfilter
hp_filtered <- hpfilter(time_series, lambda = 1600)
hpfiltter
install.packages("mFilter")
library(mFilter)
# Crear una serie de tiempo con algunos datos de ejemplo
time_series <- c(1, 5, 8, 9, 7, 8, 10, 12, 15, 20, 25, 30)
# Aplicar el filtro Hodrick-Prescott a la serie de tiempo
hp_filtered <- hpfilter(time_series, lambda = 1600)
hp_filtered <- hpfilter(time_series, freq = 1600)
# Visualizar los resultados
plot(hp_filtered)
knitr::opts_chunk$set(echo = TRUE)
install.packages("tseries")
install.packages("asta")
install.packages("forecast")
#install.packages("tidyverse")
#install.packages("lubridate")
install.packages("foreing")
install.packages("quantmod")
rownames(mtacars)
rownames(mtcars)
colnames(mtcars)
library(dplyr)
mtcat <- select(data=mtcars, hp, wt, qsec)
mtcat <- select(data=mtcars, "hp", "wt", "qsec")
mtcat <- select(data=mtcars, hp, wt, qsec)
mtcat <- mtcars[hp, wt, qsec]
mtcat <- mtcars[[hp, wt, qsec],]
mtcat <- mtcars[[hp, wt, qsec]]
mtcat <- mtcars[,[hp, wt, qsec]]
mtcat <- mtcars[[hp, qsec]]
mtcat <- mtcars[[ qsec]]
?select
select(mtcars, hp)
select(mtcars, hp, wt)
select(mtcars, hp, wt, qsec)
mtcat <- select(mtcars, hp, wt, qsec)
View(mtcat)
kmeans(mtcat, centers = 4, algorithm = "Lloyd")
?kmeans
mtcat <- select(mtcars,mpg , hp, wt, qsec)
kmeans(mtcat, centers = 4, algorithm = "Lloyd")
dist(mtcat, method = "manhattan")
kmeans(dist(mtcat, method = "manhattan"), centers = 4, algorithm = "Lioyd")
kmeans(dist(mtcat, method = "manhattan"), centers = 4, algorithm = "Lloyd")
###scalado de variables
apply(mtcat, 2, sd)
mtcat_scal <- scale(mtcat)
apply(mtcat_scal, 2, sd)
clust <- hclust(mtcat_scal)
mtcat_scal
clust <- hclust(dist(mtcat_scal), method = "complete")
clust
plot(clust)
plot(clust,hang=-1,xlab="mt_scal",
sub="", ylab="distancias",labels=1:10)
plot(clust,hang=1,xlab="mt_scal",
sub="", ylab="distancias",labels=1:10)
View(clust)
plot(clust,hang=1,xlab="mt_scal",
sub="", ylab="distancias",labels=1:32)
plot(clust,hang=1,xlab="mt_scal",
sub="", ylab="distancias")
plot(clust,hang=1,xlab="mt_scal",
sub="", ylab="distancias")
rect.hclust(estudio.clustering.iris,k=1)
plot(clust,hang=1,xlab="mt_scal",
sub="", ylab="distancias")
rect.hclust(clust,k=1)
plot(clust,hang=1,xlab="mt_scal",
sub="", ylab="distancias")
rect.hclust(clust,k=4)
clust$order
clust$labels
plot(clust,hang=1,xlab="mt_scal",
sub="", ylab="distancias")
rect.hclust(clust,k=5)
library(faraway)
set.seed(2020)
golpekar <- sample(worldcup, size = 25)
set.seed(2020)
golpekar <- sample(worldcup, size = 25, replace = TRUE)
View(golpekar)
length(golpekar)
View(worldcup)
set.seed(2020)
golpekar <- sample(worldcup, 25, replace = FALSE)
?sample
set.seed(2020)
golpekar <- sample(worldcup, 25, replace = T)
length(worldcup)
length(worldcup$Team)
set.seed(2020)
golpekar <- sample(1:595, 25, replace = F)
golworld <- worldcup[golpekar,]
View(golworld)
colnames(golworld)
gol_k <- select(golworld, Time, Shots, Passes, Tackles)
gol_k
View(gol_k)
apply(gol_k, 2, sd)
gol_k_sca <- scale(gol_k)
apply(gol_k_sca, 2, sd)
kmeans_test <- function(data, min_centers, max_centers, method1="MacQueen") {
# Crea una lista vacía para almacenar los resultados
results <- list()
#metodo que deseamos de la funcion
method1 <- c("Lloyd", "Hartigan-Wong", "MacQueen")
# Recorre todos los valores posibles de centros en el cluster
for (k in min_centers:max_centers) {
# Aplica k-means con el número de centros actual
km <- kmeans(data, centers = k, algorithm = method1)
# Almacena los resultados en la lista
results[[k]] <- km$tot.withinss
}
# Devuelve la lista de resultados
return(results)
}
kmeans_test(gol_k_sca,2, 10)
kmeans_test(gol_k_sca,2, 10, method1 = "MacQueen")
kmeans_test <- function(data, min_centers, max_centers) {
# Crea una lista vacía para almacenar los resultados
results <- list()
#metodo que deseamos de la funcion
#method1 <- c("Lloyd", "Hartigan-Wong", "MacQueen")
# Recorre todos los valores posibles de centros en el cluster
for (k in min_centers:max_centers) {
# Aplica k-means con el número de centros actual
km <- kmeans(data, centers = k, algorithm = "MacQueen")
# Almacena los resultados en la lista
results[[k]] <- km$tot.withinss
}
# Devuelve la lista de resultados
return(results)
}
kmeans_test(gol_k_sca,2, 10, method1 = "MacQueen")
kmeans_test(gol_k_sca,2, 10)
kmeans_test(gol_k_sca,3, 10)
kmeans_test(gol_k_sca,2, 10)
lilt <-kmeans_test(gol_k_sca,2, 10)
View(lilt)
lilt$value
lilt
c(lilt)
algritm_def <- kmeans(gol_k_sca, centers = 4, algorithm = "MacQueen")
plot(algritm_def)
View(algritm_def)
lilt$
value
algritm_def$centers
colnames(golworld)
library(dplyr)
library(faraway)
View(worldcup)
golworld
bin_dist <- select(golworld, Team, Position)
?factor
unique(bin_dist$Position)
bin_dist$Position <- factor(c(0,1,2,3), labels = unique(bin_dist$Position))
bin_dist$Position <- factor(25, c(0,1,2,3), labels = unique(bin_dist$Position))
View(bin_dist)
bin_dist <- select(golworld, Team, Position)
bin_dist$Position <- factor(25, c(0,1,2,3), labels = unique(bin_dist$Position))
bin_dist <- select(golworld, Team, Position)
bin_dist$Position <- factor(bin_dist$Position, c(0,1,2,3),
labels = unique(bin_dist$Position))
bin_dist
bin_dist <- select(golworld, Team, Position)
class(bin_dist$Team)
class(bin_dist$Position)
bin_dist$Position <- factor(bin_dist$Position,  levels =  unique(bin_dist$Position),
labels =c(0,1,2,3))
View(bin_dist)
unique(bin_dist$Team)
length(unique(bin_dist$Team))
c(0:18)
bin_dist$Team <- factor(bin_dist$Team, levels = unique(bin_dist$Team),
labels = c(0:18))
?dist
bin_dist2 <- dist(bin_dist, method = "binary")
kmeans(bin_dist2, centers = 4)
?hclust
clust2 <- hclust(gol_k_sca, method = "median")
clust2 <- hclust(dist(gol_k_sca), method = "median")
View(clust2)
summary(clust2)
plot(clust,hang=1,xlab="play_scal",
sub="", ylab="distancias")
rect.hclust(clust,k=4)
plot(hclust,hang=1,xlab="play_scal",
sub="", ylab="distancias")
plot(clust2,hang=1,xlab="play_scal",
sub="", ylab="distancias")
rect.hclust(clust,k=4)
plot(clust2,hang=1,xlab="play_scal",
sub="", ylab="distancias")
rect.hclust(clust2,k=4)
table(bin_dist$Position)
clust2 <- hclust(dist(gol_k_sca), method = "median")
plot(clust2,hang=-1,xlab="play_scal",
sub="", ylab="distancias")
rect.hclust(clust2,k=4)
getwd()
setwd("C:\Users\bodega\Desktop\proyecto aurelio")
setwd("C:/Users/bodega/Desktop/proyecto aurelio")
